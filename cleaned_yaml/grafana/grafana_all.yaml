items:
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: grafana
    namespace: default
  spec:
    replicas: 1
    selector:
      matchLabels: {}
    serviceName: {}
    template:
      metadata:
        labels: {}
      spec:
        containers:
        - env:
          - name: GF_SECURITY_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                key: GF_SECURITY_ADMIN_PASSWORD
                name: grafana-admin
          image: docker.io/bitnami/grafana:{IMAGE_TAG}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: dashboard
            timeoutSeconds: 5
          name: grafana
          ports:
          - containerPort: 3000
            name: dashboard
            protocol: TCP
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /api/health
              port: dashboard
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
          - mountPath: /tmp
            name: empty-dir
            subPath: tmp-dir
          - mountPath: /opt/bitnami/grafana/conf
            name: empty-dir
            subPath: app-conf-dir
          - mountPath: /opt/bitnami/grafana/tmp
            name: empty-dir
            subPath: app-tmp-dir
          - mountPath: /bitnami/grafana
            name: empty-dir
            subPath: app-volume-dir
          - mountPath: /opt/bitnami/grafana/data
            name: data
        volumes:
        - emptyDir: {}
          name: empty-dir
        - name: data
          persistentVolumeClaim:
            claimName: grafana
    volumeClaimTemplates: {}
- apiVersion: v1
  kind: Service
  metadata:
    name: grafana
    namespace: default
  spec:
    ports:
    - name: http
      port: 3000
      targetPort: dashboard
    type: ClusterIP
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: grafana
    namespace: default
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
